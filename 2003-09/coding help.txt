

recursive power function
##################################################################################################
int power(int num, unsigned int n)
{
    if (n == 0)
        return 1;
    else if (n%2 == 0)
        return power(num, n/2)*power(num, n/2);
    else
        return num*power(num, n/2)*power(num, n/2);
}
##################################################################################################







##################################################################################################
big string devide by 11 uva:10929
##################################################################################################

#include<stdio.h>
//#include<string.h>
int main()
{
    int i,j,s;
    char n[1050];
    while(1)
    {
        s=0;
        scanf("%s",&n);
        int len=0;
        for (i = 0; n[i] != '\0'; i++)
        {
            len++;
        }

        for(j=0; j<len; j++)
        {
            s=s*10+n[j]-'0';
            s=s%11;
        }

        if(s==0 && len==1)
            break;
            
        else if(s==0)
            printf("%s is a multiple of 11.\n",n);
        else
            printf("%s is not a multiple of 11.\n",n);
    }
    return 0;
}




##################################################################################################






swap two number without using a third variable
##################################################################################################
#include <stdio.h>
void swap(int *xp, int *yp)
{
    if (xp == yp) // Check if the two addresses are same
      return;
    *xp = *xp + *yp;
    *yp = *xp - *yp;
    *xp = *xp - *yp;
}
int main()
{
  int x = 10;
  int y = 33;
  swap(&x, &y);
  printf("After swap: x = %d ,y = %d   ", x,y);
  return 0;
}
##################################################################################################



swap two strings without using a third variable
##################################################################################################

#include<stdio.h>
int main()
{
  char S1[20], S2[20];
  printf("Enter S1 = ");
  scanf("%s", S1);
  printf("Enter S2 = ");
  scanf("%s", S2);
  printf("\nBefore Swapping\nS1 = %s S2 = %s\n",S1,S2);
  int i = 0;
  while(S1[i] != '\0' || S2[i] != '\0')
  {
    S1[i] = S1[i] + S2[i];
    S2[i] = S1[i] - S2[i];
    S1[i] = S1[i] - S2[i];
    i++;
  }
  printf("\nAfter Swapping\nS1 = %s S2 = %s\n",S1,S2);
  return 0;
}
##################################################################################################




strlen function
##################################################################################################

len=0;
        for (i = 0; n[i] != '\0'; i++)
        {
            len++;
        }

##################################################################################################








strcopy function

##################################################################################################
char *strcpynew(char *d, char *s){
   char *saved = d;
   while ((*d++ = *s++) != '\0');

   return saved; //returning starting address of s1
}
##################################################################################################






strcmp function


##################################################################################################
int strCmp(char string1[], char string2[] )
{
    int i = 0;
    int flag = 0;
    while (flag == 0)
    {
        if (string1[i] > string2[i])
        {
            flag = 1;
        }
        else if (string1[i] < string2[i])
        {
            flag = -1;
        }

        if (string1[i] == '\0')
        {
            break;
        }

        i++;
    }
    return flag;
}
##################################################################################################






abs function
#############################
int abs(int a)
{
    return a > 0 ? a : -a;
}
###################################################################################################





Square root of an integer
##############################
int sqrt(int x)
{
    // Base cases
    if (x == 0 || x == 1)
        return x;

    int i = 1, result = 1;
    while (result <= x)
    {
        i++;
        result = i * i;
    }
    return i-1 ;
}
###################################################################################################





prime number seive()
##########################################
int status[1100002]={0};
void siv()
{
    int N=1000000,sq;
    
	sq=msqrt(N);

    for(int i=4; i<=N; i+=2)
        status[i]=1;

    for(int i=3; i<=sq; i+=2)
    {
        if(status[i]==0)
        {
            for(int j=i*i; j<=N; j+=i)
                status[j]=1;
        }
    }
    status[1]=1;

}
###################################################################################################




c te boolean operation
##########################################
typedef int bool;
#define true 1
#define false 0
###################################################################################################



Binary Search function
##########################################

int binsearch(int arr[], int search_element, int low, int high)
{
    int mid;

    if (low > high) 					// base condition 1
        return -1;

   mid = low+((high-low) / 2); 			// mid = (low + high) / 2; [same] 

    if (search_element == arr[mid]) 	// base condition 2
    {
        return (mid);
    }
    else if (search_element < arr[mid])
    {
        binsearch(arr, search_element, low, mid - 1);
    }
    else
    {
        binsearch(arr, search_element, mid + 1, high);
    }
}

##################################################################################################


Palindrome using Recursion

##################################################################################################
int isPalendrome(int aj)
{
    static int sum = 0;
    if(aj != 0)
    {
        sum = sum *10 + aj%10;
        isPal(aj/10);   	// recursive call same as while(n!=0) using loop
    }
    else if(sum == n)
        return 1;
    else
        return 0;
}

##################################################################################################